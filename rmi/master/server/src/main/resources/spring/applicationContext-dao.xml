<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	   xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd  
      ">
	
	<!-- druid 定义数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT '1'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql false -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="config,stat,log4j,wall" /> -->
		<!-- <property name="connectionProperties" value="config.decrypt=false" /> -->
	</bean>
	
	
	
	<!-- SessionFactory -->
	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的方法 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		scope="singleton">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config-Spring.xml" />
		
		<!-- 将 Spring 的相关配置移植到 Spring 中 -->
		
		<!-- 扫描实体类 -->
		<!-- <property name="typeAliasesPackage" value="com.bestcxx.stu.springmybatis.model" />  -->
		
		<!-- mybatis Mapper *.xml 在 Spring 中配置 -->
		<!-- <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml" />   -->
		
		<!-- mybatis 分页插件 -->
		<!--  <property name="plugins">
	           <array>
	               <bean class="com.github.pagehelper.PageInterceptor">
	                   <property name="properties">
	                       <value>
	                           helperDialect=mysql 
	                           reasonable=true
	                           supportMethodsArguments=true
	                           params=count=countSql
	                           autoRuntimeDialect=true
	                       </value>
	                   </property>
	               </bean>
	           </array>
	       </property> 
	    -->
	</bean>
	
	<!-- 配置Mapper扫描器 -Spring 自动为 Mapper 注入 sqlSessionFactory--> 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <!--这里是今天要说的重点-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		<property name="basePackage" value="com.bestcxx.stu.springmybatis.dao"/>
	</bean>
	
</beans>